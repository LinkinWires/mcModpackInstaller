<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TooltipConfig" xml:space="preserve">
    <value>Folder for settings of mods. Minecraft does not save its setting in this folder. Also worth mentioning that controls settings for mods are saved in the options.txt.</value>
  </data>
  <data name="TooltipCoremods" xml:space="preserve">
    <value>Folder for installing special mods which can not only add new code, but also change old. Usually those mods are libraries or APIs for other mods. With the release of Minecraft Forge for 1.6.1, coremods folder is not used anymore.</value>
  </data>
  <data name="TooltipLogs" xml:space="preserve">
    <value>Folder for logs which contain all console output during game session. If you are not a tester, you can delete logs safely.</value>
  </data>
  <data name="TooltipMods" xml:space="preserve">
    <value>Folder for installing mods. Don't know what mods are? Why do you need this progam then? =)</value>
  </data>
  <data name="TooltipOptionsTxt" xml:space="preserve">
    <value>File with all Minecraft options and also all controls settings for mods.</value>
  </data>
  <data name="TooltipResourcepacks" xml:space="preserve">
    <value>Folder for installing resource packs - official way for changing and adding new textures, sounds and models.</value>
  </data>
  <data name="TooltipSaves" xml:space="preserve">
    <value>Folder for worlds with associated to them datapacks and custom structures.</value>
  </data>
  <data name="TooltipScreenshots" xml:space="preserve">
    <value>Folder for in-game screenshots made with pressing F2 key.</value>
  </data>
  <data name="TooltipServerResourcePacks" xml:space="preserve">
    <value>Folder for caching resource packs downloaded by servers during playtime on them. This is used, for example, in Cops and Crims mini-game on Hypixel.</value>
  </data>
  <data name="TooltipServersDat" xml:space="preserve">
    <value>File containing all info about Minecraft servers added by the user.</value>
  </data>
  <data name="TooltipServersDatOld" xml:space="preserve">
    <value>Older copy of servers.dat backed up by Minecraft itself.</value>
  </data>
  <data name="TooltipShaderpacks" xml:space="preserve">
    <value>Folder for shader packs - special mods for implementing modern graphical technologies, such as PBR or realistic shadows and water into Minecraft.</value>
  </data>
  <data name="TooltipStructures" xml:space="preserve">
    <value>Folder for modded structures. This folder does not change existing Minecraft structures and custom structures, which were created with use of structure block. (these are saved with the world in which they were created)</value>
  </data>
  <data name="TooltipTexturepacks" xml:space="preserve">
    <value>Folder for texture packs - official way for changing and adding new textures. With the 13w24a snapshot for 1.6.1 texture packs were replaced by resource packs.</value>
  </data>
  <data name="TooltipVariousMods" xml:space="preserve">
    <value>Deletes remains of various mods.</value>
  </data>
</root>